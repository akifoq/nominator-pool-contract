{- shares#_ amount:(VarUInteger 32) = Shares;
   balances#_ stakes:(HashmapE 267 Shares) ;; addr_std$10 + Nothing$0 + 8 + 256
              total_shares:Shares
              total_staked:Grams
              validator_balance:Grams
              total_sent:Grams
            = Balances;

   pendings#_ pending_deposits:(HashmapE 267 Grams)
              pending_withdrawals:(HashmapE 267 Shares)
            = Pendings;

   in_limbo#0 = State;
   elections#1 utime_since:uint32
               msgs_sent:uint8
               msgs_recv:uint8
             = State;
   stake_held#2 utime_since:uint32 = State;
   stake_requested#3 utime_since:uint32 = State;
   wait_for_unfreeze#4 utime_since:uint32 = State;
   finally_requested#5 = State;

   settings#_ validator_fee:uint16
              min_val_balance:Grams
            = Settings; ;; only mutable values are stored in data

   storage#_ controller:MsgAddrInt
             state:State
             settings:Settings
             balances:^Balances
             pendings:Pendings
           = Storage;
-}

(slice, int) load_shares(slice s) asm( -> 1 0) "LDVARUINT32";
builder store_shares(builder b, int x) asm "STVARUINT32";

int state_tag::in_limbo() asm "0 PUSHINT";
int state_tag::elections() asm "1 PUSHINT";
int state_tag::stake_held() asm "2 PUSHINT";
int state_tag::stake_requested() asm "3 PUSHINT";
int state_tag::wait_for_unfreeze() asm "4 PUSHINT";
int state_tag::finally_requested() asm "5 PUSHINT";


builder store_state(builder b, state) inline_ref {
  var [tag, _2, _3, _4] = state;
  b = b.store_uint(tag, 4);
  if (tag == state_tag::elections()) {
    var (utime_since, msgs_sent, msgs_recv) = (_2, _3, _4);
    b = b.store_uint(utime_since, 32)
         .store_uint(msgs_sent, 8)
         .store_uint(msgs_recv, 8);
  }
  if (tag == state_tag::stake_held()) {
    int utime_since = _2;
    b = b.store_uint(utime_since, 32);
  }
  if (tag == state_tag::stake_requested()) {
    int utime_since = _2;
    b = b.store_uint(utime_since, 32);
  }
  if (tag == state_tag::wait_for_unfreeze()) {
    int utime_since = _2;
    b = b.store_uint(utime_since, 32);
  }
  return b;
}

_ load_state(slice cs) inline_ref {
  int tag = cs~load_uint(4);
  var res = [tag, null(), null(), null()];
  if (tag == state_tag::elections()) {
    res = [tag, cs~load_uint(32),
           cs~load_uint(8),
           cs~load_uint(8)];
  }
  if (tag == state_tag::stake_held()) {
    res = [tag, cs~load_uint(32), null(), null()];
  }
  if (tag == state_tag::stake_requested()) {
    res = [tag, cs~load_uint(32), null(), null()];
  }
  if (tag == state_tag::wait_for_unfreeze()) {
    res = [tag, cs~load_uint(32), null(), null()];
  }
  return (cs, res);
}

cell pack_balances(stakes, total_shares, total_staked,
                   validator_balance, total_sent) inline_ref {
  return begin_cell()
    .store_dict(stakes)
    .store_shares(total_shares)
    .store_grams(total_staked)
    .store_grams(validator_balance)
    .store_grams(total_sent)
  .end_cell();
}

_ unpack_balances(cell balances) inline_ref {
  slice cs = balances.begin_parse();
  return (
    cs~load_dict(),   ;; stakes
    cs~load_shares(), ;; total_shares
    cs~load_grams(),  ;; total_staked
    cs~load_grams(),  ;; validator_balance
    cs~load_grams()   ;; total_sent
  );
}

builder store_settings(builder b, settings) inline_ref {
  var [validator_fee, min_val_balance] = settings;
  return b.store_uint(validator_fee, 16)
          .store_grams(min_val_balance);
}

_ load_settings(slice cs) {
  var res = [
    cs~load_uint(16),
    cs~load_grams()
  ];
  return (cs, res);
}

builder store_pendings(builder b, pendings) inline_ref {
  var [pending_deposits, pending_withdrawals] = pendings;
  return b.store_dict(pending_deposits)
          .store_dict(pending_withdrawals);
}

_ load_pendings(slice cs) inline_ref {
  var res = [cs~load_dict(), cs~load_dict()];
  return (cs, res);
}

_ load_data() impure inline_ref {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(),
    ds~load_state(),
    ds~load_settings(),
    ds~load_ref(),
    ds~load_pendings()
  );
}

() save_data(controller, state, settings, balances, pendings) impure inline_ref {
  set_data(begin_cell()
    .store_slice(controller)
    .store_state(state)
    .store_settings(settings)
    .store_ref(balances)
    .store_pendings(pendings)
  .end_cell());
}
